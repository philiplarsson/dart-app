FORMAT: 1A

# Dart-App

DartApp API is a a RESTful API.

There are four main endpoints:

- **Throw**: This is a throw made. A throw is related to a game (which the throw
  belongs to) and a user (who throw the dart).
- **GameType**: Different gametypes such as "20 to 15" or "201".
- **Game**: A single match. A game has a gametype.
- **User**: A person who participates in a game and throw darts.

When making requests, the following headers should be set:
- Accept: application/json
- Content-Type: application/json

## Authentication
HTTP Basic access authentication is used for every route.
This uses the email for the "username". So, if the email is kalle@example.com and the password is nicepassword then this should be encoded in base64 as kalle@example.com:nicepassword (and we get: a2FsbGVAZXhhbXBsZS5jb206bmljZXBhc3N3b3Jk).
This is then sent as an header as such: Authorization Basic a2FsbGVAZXhhbXBsZS5jb206bmljZXBhc3N3b3Jk.

Observe! Since the password is being sent in base64 (which is very easy to decode) this should only be used over HTTPS.

## Sorting and Pagination
For some routes the order can be sorted in reverse order by using a query parameter:

### Sorting
- GET ´http://localhost:8000/api/v1/throws?sort_by=asc´
- GET ´http://localhost:8000/api/v1/games?sort_by=asc´

### Pagination
Pagination is used for enpoints where the data is large.
Add query parameter page like so:

- GET ´http://localhost:8000/api/v1/throws?page=2´

# Group Throws

Resources related to throws in the API.

## Throw [/throws/{throw_id}]

+ Parameters
    + throw_id: 1 (required, number) - Id of the throw in form of an integer

### View a Single Throw [GET]

Fetch the details of a single throw using this action.

+ Response 200 (application/json)

        {
            "data": {
                "id": 1,
                "pie_value": 3,
                "multiplier": 2,
                "created_at": "2018-03-14 15:46:43",
                "created_at_human": "3 weeks ago",
                "user": {
                    "data": {
                        "id": 3,
                        "name": "Mac the not so klein",
                        "username": "mcklein",
                        "avatar": "https:\/\/www.gravatar.com\/avatar\/cea373ce39b8332ce5db287c3aa27b5a?s=80&d=retro",
                        "account_type": "admin"
                    }
                },
                "game": {
                    "data": {
                        "id": 11,
                        "created_at": "2018-03-14 15:46:43",
                        "created_at_human": "3 weeks ago",
                        "gametype": {
                            "data": {
                                "id": 1,
                                "name": "20 to 15",
                                "description": "Mollitia est voluptatem animi tempore."
                            }
                        }
                    }
                }
            }
        }

### Update a Single Throw [PATCH]

Update a single throw using this action. It takes a JSON object containing the details of a throw.

+ user_id (number) - Id of the user who made the throw
+ game_id (number) - Id of the game this throw was made in
+ pie_value (number) - Value the dart landed at.
+ multiplier (number) - Multiplier the dart landed at.

+ Request (application/json)
    + Attributes (Throw NoFluff)

+ Response 200 (application/json)

        {
            "data": {
                "id": 11,
                "pie_value": 50,
                "multiplier": 1,
                "created_at": "2018-03-14 15:46:43",
                "created_at_human": "5 minutes ago",
                "user": {
                    "data": {
                        "id": 3,
                        "name": "Mac Klein",
                        "username": "ali.brakus",
                        "avatar": "https:\/\/www.gravatar.com\/avatar\/cea373ce39b8332ce5db287c3aa27b5a?s=80&d=retro",
                        "account_type": "admin"
                    }
                },
                "game": {
                    "data": {
                        "id": 2,
                        "created_at": "2018-03-14 15:46:43",
                        "created_at_human": "5 minutes ago",
                        "gametype": {
                            "data": {
                                "id": 2,
                                "name": "201",
                                "description": "Repellendus aliquam animi tenetur qui et quam."
                            }
                        }
                    }
                }
            }
        }

### Delete Throw [DELETE]

+ Response 204

## Throws Collection [/throws]

### List All Throws [GET]
List all throws using this action.

+ Response 200 (application/json)

        {
            "data": [{
                "id": 39,
                "pie_value": 1,
                "multiplier": 1,
                "created_at": "2018-04-07 19:10:24",
                "created_at_human": "7 seconds ago",
                "user": {
                    "data": {
                        "id": 1,
                        "name": "Isac Hammes The Second",
                        "username": "isaac",
                        "avatar": "https:\/\/www.gravatar.com\/avatar\/0d1e761d0882962f66ab3abb44130f80?s=80&d=retro",
                        "account_type": "user"
                    }
                },
                "game": {
                    "data": {
                        "id": 20,
                        "created_at": "2018-03-14 15:46:43",
                        "created_at_human": "3 weeks ago",
                        "gametype": {
                            "data": {
                                "id": 1,
                                "name": "20 to 15",
                                "description": "Mollitia est voluptatem animi tempore."
                            }
                        }
                    }
                }
            }, {
                "id": 1,
                "pie_value": 3,
                "multiplier": 2,
                "created_at": "2018-03-14 15:46:43",
                "created_at_human": "3 weeks ago",
                "user": {
                    "data": {
                        "id": 3,
                        "name": "Mac the not so klein",
                        "username": "mcklein",
                        "avatar": "https:\/\/www.gravatar.com\/avatar\/cea373ce39b8332ce5db287c3aa27b5a?s=80&d=retro",
                        "account_type": "admin"
                    }
                },
                "game": {
                    "data": {
                        "id": 11,
                        "created_at": "2018-03-14 15:46:43",
                        "created_at_human": "3 weeks ago",
                        "gametype": {
                            "data": {
                                "id": 1,
                                "name": "20 to 15",
                                "description": "Mollitia est voluptatem animi tempore."
                            }
                        }
                    }
                }
            }]
        }

### Create a New Throw [POST]

You can create new throws using this action.
Note that if the user threw a value of 60, the pie_value should be 20 and the multiplier should be 3.
Moreover, bullseye is represented as 50 with a multiplier of 1.

+ user_id (number) - Id of the user who made the throw
+ game_id (number) - Id of the game this throw was made in
+ pie_value (number) - Value the dart landed at.
+ multiplier (number) - Multiplier the dart landed at.

+ Request Create Single Throw (application/json)
    + Attributes (Throw NoFluff)

+ Response 200 (application/json)

    + Attributes
        - data (Throw Full)

+ Request Create Multiple Throws (application/json)
    + Attributes (array[Throw NoFluff])

+ Response 200 (application/json)

    + Attributes
        - data (array[Throw Full])

### Update Multiple Throws [PATCH]

You can update multiple throws using this action.
Note that if the user threw a value of 60, the pie_value should be 20 and the multiplier should be 3.
Moreover, bullseye is represented as 50 with a multiplier of 1.


+ id (number, required) - Id of the throw that should be updated.
+ user_id (number) - Id of the user who made the throw.
+ game_id (number) - Id of the game this throw was made in.
+ pie_value (number) - Value the dart landed at.
+ multiplier (number) - Multiplier the dart landed at.

+ Request (application/json)
    + Attributes (array[Throw NoFluff])

+ Response 200 (application/json)
    + Attributes
        - data (array[Throw Full])

# Group GameTypes

Resources related to game types in the API.

## GameType [/gametypes/{gametype_id}]

+ Parameters
    + gametype_id: 1 (required, number) - Id of the gametype in form of an integer.

### View a Single GameType [GET]

Fetch the details of a single gametype using this action.

+ Response 200 (application/json)
    + Attributes
        - data (GameType Full)

### Update a Single GameType [PATCH]

Update a single game type using this action. It takes a JSON object containing the details of a gametype.

+ description (string) - Description of the gametype.
+ name (string) - Name of the gametype.

+ Request (application/json)
    + Attributes (GameType NoFluff)

+ Response 200 (application/json)
    + Attributes
        - data (GameType Full)

### Delete GameType [DELETE]

+ Response 204

## GameTypes Collection [/gametypes]

### List All GameTypes [GET]
List all gametypes using this action.

+ Response 200 (application/json)
    + Attributes
        - data (array[GameType Full])

### Create a New GameType [POST]
Create new gametypes using this action.

+ description (string) - Description of the gametype.
+ name (string) - Name of the gametype.

+ Request Create Single GameType (application/json)
    + Attributes (GameType NoFluff)

+ Response 200 (application/json)
    + Attributes
        - data (GameType Full)

+ Request Create Multiple GameTypes (application/json)
    + Attributes (array[GameType NoFluff])

+ Response 200 (application/json)
    + Attributes
        - data (array[GameType Full])

### Update Multiple GameTypes [PATCH]

You can update multiple gametypes using this action.

+ id (number, required) - Id of the gametype that should be updated.
+ description (string) - Description of the gametype.
+ name (string) - Name of the gametype.

+ Request  (application/json)

        [
         {
          "id": 5,
          "description": "Curabitur et neque quam. Fusce consectetur risus ac consectetur lobortis.",
          "name": "201"
         },
         {
           "id": 8,
           "description": "Easy game for the beginner",
           "name": "3 to 1"
         }
        ]

+ Response 200 (application/json)
    + Attributes
        - data (array[GameType Full])

# Group Games

Resources related to games in the API.

## Game [/games/{game_id}]

+ Parameters
    + game_id: 1 (required, number) - Id of the game in form of an integer.

### View a Single Game [GET]

Fetch the details of a single game using this action.

+ Response 200 (application/json)
    + Attributes
        - data (Game Full)

### Update a Single Game [PATCH]

Update a single game using this action. It takes a JSON object containing the game type id.

+ game_type_id (number) - Id of the game type.

+ Request (application/json)

        {
          "game_type_id": 5
        }

+ Response 200 (application/json)
    + Attributes
        - data (Game Full)

### Delete Game [DELETE]

Delete a single game using this action.
This route requires an admin user.

+ Response 204

## Game Collection [/games]

### List All Games [GET]
List all games using this action.

+ Response 200 (application/json)
    + Attributes
        - data (array[Game Full])

### Create a New Game [POST]
Create a new game using this action.

+ game_type_id (number) - Id of the game type.

+ Request Create Single Game (application/json)

        {
          "game_type_id": 5
        }

+ Response 200 (application/json)
    + Attributes
        - data (Game Full)

### Update Multiple Games [PATCH]

Update multiple games using this action.

+ id (number, required) - Id of the game that should be updated.
+ game_type_id (number) - Id of the game type.

+ Request (application/json)

        [
         {
                "id": "1",
                "game_type_id": 5
         },
         {
                "id": "2",
                "game_type_id": 9
         }
        ]

+ Response 200 (application/json)
    + Attributes
        - data(array[Game Full])

# Group Users

Resource related to users in the API.

## Users [/users/{user_id}]

+ Parameters
    + user_id: 1 (required, number) - Id of the user in form of an integer

### View a Single User [GET]

Fetch the details of a single user using this action.

+ Response 200 (application/json)
    + Attribute
        - data (User Full)

### Update a Single User [PATCH]

Update a single user using this action. It takes a JSON object containing the attributes that you wish to change.
This route requires an admin user.

+ Request (application/json)
    + Attributes (User NoFluff)

+ Response 200 (application/json)
    + Attributes
        - data (User Full)

### Delete User [DELETE]

Delete a single user using this action.
This route requires an admin user.

+ Response 204

### User Throws [GET /users/{user_id}/throws]

Fetch all throws for a specific user using this action.

+ Parameters
    + user_id: 1 (required, number) - Id of the user in form of an integer

+ Response 200 (application/json)

        {
          "data": [
            {
              "id": 39,
              "pie_value": 1,
              "multiplier": 1,
              "created_at": "2018-04-07 19:10:24",
              "created_at_human": "1 month ago"
            },
            {
              "id": 38,
              "pie_value": 1,
              "multiplier": 1,
              "created_at": "2018-03-19 21:10:45",
              "created_at_human": "1 month ago"
            }
        }

## User Collection [/users]

### List All Users [GET]
List all Users using this action.

+ Response 200 (apllication/json)
    + Attributes
        - data (array[User Full])

### Create a New User [POST]
Create a new user using this action.

This route requires an admin user.

+ Request Create Single User (application/json)
    + Attributes (User WithPassword)

+ Response 200 (application/json)
    + Attributes
        - data (User Full)

+ Request Create Multiple Users (application/json)
    + Attributes (array[User WithPassword])

+ Response 200 (application/json)
    + Attributes
        - data (array[User Full])

### Update Multiple Users [PATCH]
You can update multiple users using this action.

+ id (number, required) - Id of the user that should be updated.
+ name (string) - Name of the user.
+ username (string) - Username of the user.
+ email (string) - Email of the user.

This route requires an admin user.

+ Request (application/json)

        [
        {
        	"id": 1,
        	"name": "Ad the first",
        	"username": "ad1",
        	"email": "ad@example.com"
        },
        {
        	"id": 2,
        	"name": "Bo the Second",
        	"username": "bojones",
        	"email": "bosec@example.com"
        }
        ]

+ Response 200 (application/json)

        {
          "data": [
            {
              "id": 1,
              "name": "Ad the first",
              "username": "ad1",
              "email": "ad@example.com",
              "avatar": "https:\/\/www.gravatar.com\/avatar\/a4cff7c242ce2666d55d3edd6867ab60?s=80&d=retro",
              "account_type": "user",
              "created_at": "2018-03-14 15:46:42",
              "created_at_human": "1 month ago"
            },
            {
              "id": 2,
              "name": "Bo the Second",
              "username": "bojones",
              "email": "bosec@example.com",
              "avatar": "https:\/\/www.gravatar.com\/avatar\/34f715360a61c8fb87f5e6d6f4e52ba4?s=80&d=retro",
              "account_type": "admin",
              "created_at": "2018-03-14 15:46:42",
              "created_at_human": "1 month ago"
            }
          ]
        }


# Data Structures

## Throw Full (object)
- id: `21` (number) - The unique ID of the throw.
- Include Throw NoFluff
- created_at: `2018-03-14 15:46:43` (string) - Date and time when the throw was created.
- created_at_human: `3 weeks ago` (string) - Date and time when the throw was created in human friendly format.

## Throw NoFluff (object)
- user_id: `3` (number) - The id of the user who made the throw.
- game_id: `2` (number) - The id of the game this throw was made in.
- pie_value: `50` (number) - The pie value of the throw.
- multiplier: `1` (number) - The multiplier of the throw.

## GameType Full (object)
- id: `5` (number) - The unique ID of the gametype.
- Include GameType NoFluff
- created_at: `2018-04-22 10:37:45` (string) - Date and time when the gametype was created.
- created_at_human: `1 second ago` (string) - Date and time when the gametype was created in human friendly format.

## GameType NoFluff (object)
- name: `201` (string) - The unique name of the gametype.
- description: `Curabitur et neque quam. Fusce consectetur risus ac consectetur lobortis.` (string) - Description of the gametype.

## Game Full (object)
- id: `1` (number) - The unique ID of the game.
- Include Game NoId

## Game NoId (object)
- created_at: `2018-04-22 10:37:45` (string) - Date and time when the game was created.
- created_at_human: `1 second ago` (string) - Date and time when the game was created in human friendly format.
- gametype
    + data (GameType Full)

## User Full (object)
- id: `1` (number) - The unique ID the user.
- Include User NoFluff
- avatar: `https://www.gravatar.com/avatar/aoeu` (string) - Gravatar of user.
- account_type: `admin` (string) - Account Type (admin or user) of user.
- created_at: `2018-04-22 10:37:45` (string) - Date and time when the user was created.
- created_at_human: `1 second ago` (string) - Date and time when the user was created in human friendly format.

## User NoFluff (object)
- name: `Eve` (string) - Name of the user.
- username: `ninjaEve` (string) - Username of the user.
- email: `eve@example.com` (string) - Email of the user.

## User WithPassword (object)
- name: `Eve` (string) - Name of the user.
- username: `ninjaEve` (string) - Username of the user.
- email: `eve@example.com` (string) - Email of the user.
- password: `superPassword` (string) - Password of the user.
